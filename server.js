import "dotenv/config";
import express from "express";
import mongoose from "mongoose";
import cors from "cors";
import User from "./models/User.js";
import crypto from "node:crypto";

// ===== Telegram notifier helpers =====
const NOTIFY_BOT_TOKEN = process.env.NOTIFY_BOT_TOKEN || "";
const NOTIFY_CHAT_ID = String(process.env.NOTIFY_CHAT_ID || "")
  .split(",")
  .map(s => s.trim())
  .filter(Boolean);

async function sendTG(text, extra = {}) {
  if (!NOTIFY_BOT_TOKEN || NOTIFY_CHAT_ID.length === 0) return;
  const url = `https://api.telegram.org/bot${NOTIFY_BOT_TOKEN}/sendMessage`;
  const base = { parse_mode: "HTML", disable_web_page_preview: true, ...extra };
  try {
    await Promise.all(
      NOTIFY_CHAT_ID.map(chat_id =>
        fetch(url, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ chat_id, text, ...base }),
        })
      )
    );
  } catch (e) {
    console.error("notify error:", e);
  }
}

// ===== Referral helpers =====
function genRefCode() {
  return Math.random().toString(36).slice(2, 8); // 6 —Å–∏–º–≤–æ–ª–æ–≤
}

async function ensureUserRefCode(user) {
  if (user?.referral?.code) return user.referral.code;
  let code = genRefCode();
  for (let i = 0; i < 5; i++) {
    const exists = await User.findOne({ "referral.code": code }, { _id: 1 }).lean();
    if (!exists) break;
    code = genRefCode();
  }
  await User.updateOne({ _id: user._id }, { $set: { "referral.code": code } });
  return code;
}

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º ref –∫–∞–∫ –∫–æ–¥ –ò–õ–ò –∫–∞–∫ telegramId –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
async function attachReferralIfAny(newUser, refRaw) {
  const ref = String(refRaw || "").trim();
  if (!ref) return;

  let inviter = await User.findOne({ "referral.code": ref });
  if (!inviter && /^\d+$/.test(ref)) {
    inviter = await User.findOne({ telegramId: ref });
  }
  if (!inviter) return;
  if (String(inviter.telegramId) === String(newUser.telegramId)) return; // —Å–∞–º —Å–µ–±—è

  // —Å—Ç–∞–≤–∏–º ¬´–∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª¬ª –æ–¥–∏–Ω —Ä–∞–∑
  await User.updateOne(
    { _id: newUser._id, "referral.referredBy": { $in: [null, undefined] } },
    {
      $set: {
        "referral.referredBy": inviter?.username ? String(inviter.username) : String(inviter.telegramId),
        "referral.referredByCode": inviter.referral?.code || null,
        "referral.referredAt": new Date(),
      }
    }
  );

  // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
  await User.updateOne(
    { _id: inviter._id },
    {
      $inc: { "referral.referralsCount": 1 },
      $push: { "referral.referrals": { telegramId: String(newUser.telegramId), at: new Date() } },
    }
  );
}

async function notifyAppOpen(user) {
  const appName = process.env.APP_NAME;
  const u = user?.username ? `@${user.username}` : `id${user?.telegramId}`;
  const name = user?.firstName ? ` (${user.firstName})` : "";
  const when = new Date().toLocaleString("ru-RU");
  const text = `\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n‚Ä¢ ${u}${name}\n\nüïí ${when}`;
  await sendTG(text);
}

async function notifyChannelSubscribed({ telegramId, username, chatId, rewardTon }) {
  const appName = process.env.APP_NAME;
  const u = username ? `@${username}` : `id${telegramId}`;
  const when = new Date().toLocaleString("ru-RU");
  const text =
    `‚úÖ <b></b>` +
    `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\n\n` +
    `‚Ä¢ ${u}\n` +
    `‚Ä¢ –ö–∞–Ω–∞–ª: <code>${chatId || process.env.CHANNEL_ID || "n/a"}</code>\n\n` +
    `üéÅ –ù–∞–≥—Ä–∞–¥–∞: ${rewardTon ?? process.env.CHANNEL_REWARD_TON ?? 0} TON\n\n` +
    `üïí ${when}`;
  await sendTG(text);
}

const app = express();

const FIRST_DEPOSIT_REWARD_USDT = Number(process.env.FIRST_DEPOSIT_REWARD_USDT || 1);

app.use(cors({
  origin: [
    "https://onex-gifts.vercel.app"                     // ‚Üê –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  ],
  methods: ["GET", "POST", "OPTIONS"],
  allowedHeaders: ["Content-Type", "x-telegram-id"],
  optionsSuccessStatus: 204
}));

// ‚úÖ –ß—Ç–æ–±—ã preflight-–∑–∞–ø—Ä–æ—Å—ã OPTIONS –Ω–µ –ª–æ–º–∞–ª–∏ –±—ç–∫–µ–Ω–¥
app.options("*", cors());

// ‚úÖ –ü–∞—Ä—Å–∏–º JSON –≤ body
app.use(express.json({ limit: "1mb" }));

// ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect(process.env.MONGODB_URI)
  .then(() => console.log("‚úÖ MongoDB connected"))
  .catch((err) => console.error("‚ùå MongoDB error:", err));

// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞
app.get("/ping", (_, res) => res.json({ ok: true }));
app.get("/", (_, res) => res.type("text/plain").send("OK"));



// ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞–∫ –≤ Octys)
app.post("/register-user", async (req, res) => {
  try {
    const { telegramId, username, firstName, lastName, photoUrl, ref } = req.body;

    if (!telegramId) {
      return res.status(400).json({ error: "telegramId is required" });
    }

    let user = await User.findOne({ telegramId });

    // –ï—Å–ª–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º
    if (!user) {
      const newUser = new User({
        telegramId,
        username: username || null,
        firstName: firstName || null,
        lastName: lastName || null,
        photoUrl: photoUrl || null,
        balance: 0,
        referredBy: ref || null,
      });
      await newUser.save();
      console.log(`‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω: ${telegramId}`);

      const code = await ensureUserRefCode(newUser);
      await attachReferralIfAny(newUser, ref);  // ref —É–∂–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞

      try {
        await notifyAppOpen(newUser);
      } catch (e) { console.error("notify app_open (new) error:", e); }
      await User.updateOne({ _id: newUser._id }, { $set: { lastSeenAt: new Date(), "notify.lastAppOpenAt": new Date() } });
      return res.json({ ok: true, user: newUser });
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º
    user.username = username || user.username;
    user.firstName = firstName || user.firstName;
    user.lastName = lastName || user.lastName;
    user.photoUrl = photoUrl || user.photoUrl;
    await user.save();

    // –í—Å–µ–≥–¥–∞ —à–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ –±–µ–∑ –∞–Ω—Ç–∏—Å–ø–∞–º–∞
    try {
      await notifyAppOpen(user);
    } catch (e) { console.error("notify app_open (existing) error:", e); }
    await User.updateOne({ _id: user._id }, { $set: { lastSeenAt: new Date(), "notify.lastAppOpenAt": new Date() } });

    console.log(`üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω: ${telegramId}`);
    res.json({ ok: true, user });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", err);
    res.status(500).json({ ok: false, error: "Server error" });
  }
});

// ‚úÖ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Ñ—Ä–æ–Ω—Ç—É)
app.get("/get-user", async (req, res) => {
  try {
    const { telegramId } = req.query;
    if (!telegramId) return res.status(400).json({ error: "telegramId is required" });

    const user = await User.findOne({ telegramId });
    if (!user) return res.status(404).json({ error: "User not found" });

    res.json({ ok: true, user });
  } catch (err) {
    res.status(500).json({ ok: false, error: "Server error" });
  }
});

// GET –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –º–∞—Ä—à—Ä—É—Ç –∂–∏–≤ (–≤–µ—Ä–Ω—ë—Ç 405)
app.get("/tasks/channel/verify", (_req, res) => res.status(405).json({ ok:false, error:"Use POST" }));

// POST: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞—á–∏—Å–ª—è–µ—Ç TON
app.post("/tasks/channel/verify", async (req, res) => {
  try {
    const { telegramId } = req.body || {};
    if (!telegramId) return res.status(400).json({ ok:false, error: "telegramId is required" });

    const user = await User.findOne({ telegramId: String(telegramId) });
    if (!user) return res.status(404).json({ ok:false, error: "User not found" });

    if (user.tasks?.channelSubscribed) {
      return res.json({ ok:true, status:"already_claimed", user });
    }

    // Bot API
    const url = `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/getChatMember`;
    const resp = await fetch(url, {
      method: "POST",
      headers: { "Content-Type":"application/json" },
      body: JSON.stringify({ chat_id: process.env.CHANNEL_ID, user_id: String(telegramId) })
    });
    const data = await resp.json();
    if (!data.ok) return res.status(502).json({ ok:false, error:"Bot API error", details:data });

    const status = data.result?.status;  // 'creator'|'administrator'|'member'|'restricted'|'left'|'kicked'
    const isSub = new Set(["creator","administrator","member","restricted"]).has(status);
    if (!isSub) return res.json({ ok:true, status:"not_subscribed" });

    // –ê—Ç–æ–º–∞—Ä–Ω–æ ‚Äî —á—Ç–æ–±—ã –Ω–µ –Ω–∞—á–∏—Å–ª–∏—Ç—å –¥–≤–∞–∂–¥—ã –Ω–∞ –≥–æ–Ω–∫–∞—Ö
    const upd = await User.updateOne(
      { telegramId: String(telegramId), "tasks.channelSubscribed": { $ne: true } },
      { $inc: { balanceTon: Number(process.env.CHANNEL_REWARD_TON || 0) },
        $set: { "tasks.channelSubscribed": true } }
    );

    try {
      await notifyChannelSubscribed({
          telegramId: String(telegramId),         // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –≤ —ç—Ç–æ–º —Ö–µ–Ω–¥–ª–µ—Ä–µ
          username: user?.username,               // –∏–ª–∏ req.body.username, –µ—Å–ª–∏ —Ç–∞–∫ —É–¥–æ–±–Ω–µ–µ
          chatId: process.env.CHANNEL_ID,         // –º–æ–∂–Ω–æ –ø—Ä–æ–∫–∏–Ω—É—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π chatId –∫–∞–Ω–∞–ª–∞, –µ—Å–ª–∏ –æ–Ω —É —Ç–µ–±—è –µ—Å—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥–µ
          rewardTon: Number(process.env.CHANNEL_REWARD_TON || 0),
        });
      } catch (e) {
      console.error("notify channel_subscribed (rewarded) error:", e);
    }

    try {
      await notifyChannelSubscribed({
          telegramId: String(telegramId),
          username: user?.username,
          chatId: process.env.CHANNEL_ID,
          rewardTon: Number(process.env.CHANNEL_REWARD_TON || 0),
        });
      } catch (e) {
      console.error("notify channel_subscribed (already) error:", e);
    }

    if (upd.modifiedCount === 0) {
      return res.json({ ok:true, status:"already_claimed" });
    }

    const fresh = await User.findOne({ telegramId: String(telegramId) });
    return res.json({ ok:true, status:"rewarded", reward:{ ton:Number(process.env.CHANNEL_REWARD_TON||0) }, user:fresh });
  } catch (e) {
    console.error("/tasks/channel/verify error:", e);
    res.status(500).json({ ok:false, error:"Server error" });
  }
});

// ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
app.post("/withdraw/create", async (req, res) => {
  try {
    const { telegramId, amount, address } = req.body || {};
    if (!telegramId) return res.status(400).json({ ok:false, error: "telegramId is required" });

    const amt = Number(amount);
    if (!Number.isFinite(amt) || amt <= 0) {
      return res.status(400).json({ ok:false, error: "Invalid amount" });
    }

    // –ª—ë–≥–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è TRC20 (–∞–¥—Ä–µ—Å–∞ Tron –≤ Base58, –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å T, –¥–ª–∏–Ω–∞ 34)
    const addr = String(address || "").trim();
    const isTron = /^T[1-9A-HJ-NP-Za-km-z]{33}$/.test(addr);
    if (!isTron) {
      return res.status(400).json({ ok:false, error: "Invalid TRC20 address" });
    }

    const user = await User.findOne({ telegramId: String(telegramId) });
    if (!user) return res.status(404).json({ ok:false, error: "User not found" });

    const order = {
      _id: new mongoose.Types.ObjectId(),
      amount: amt,                 // —Å—É–º–º–∞ –≤ USDT (–∫–∞–∫ —Ç—ã –∏ —Ö–æ—á–µ—à—å)
      currency: "USDT",
      address: addr,
      status: "–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ",       // –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
      createdAt: new Date()
    };

    await User.updateOne(
      { telegramId: String(telegramId) },
      { $push: { withdrawOrders: { $each: [order], $position: 0 } } } // –¥–æ–±–∞–≤–∏–º –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
    );

    return res.json({ ok: true, order });
  } catch (e) {
    console.error("POST /withdraw/create error:", e);
    res.status(500).json({ ok:false, error:"Server error" });
  }
});

// ‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get("/withdraw/list", async (req, res) => {
  try {
    const { telegramId } = req.query || {};
    if (!telegramId) return res.status(400).json({ ok:false, error: "telegramId is required" });

    const user = await User.findOne({ telegramId: String(telegramId) }).lean();
    if (!user) return res.status(404).json({ ok:false, error: "User not found" });

    const orders = Array.isArray(user.withdrawOrders) ? user.withdrawOrders : [];
    res.json({ ok:true, orders });
  } catch (e) {
    console.error("GET /withdraw/list error:", e);
    res.status(500).json({ ok:false, error:"Server error" });
  }
});


app.get("/postback/jetton", async (req, res) => {

  console.log("[POSTBACK] raw:", req.originalUrl);
  console.log("[POSTBACK] query:", req.query);
  try {
    const {
      player_id,             // –∏—Ö –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π id –∏–≥—Ä–æ–∫–∞ (–º–æ–∂–µ—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –Ω–∞—à–∏–º)
      player_telegram_id,    // Telegram ID (—Å—Ç—Ä–æ–∫–∞, –±—ã–≤–∞–µ—Ç "0", –µ—Å–ª–∏ –Ω–µ—Ç)
      promo_slug,
      click_slug,
      action,                // register | first_deposit | deposit | withdraw
      amount_usd,            // —á–∏—Å–ª–æ –≤ USD
      tx_id                  // —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏)
    } = req.query;

    // –ù–∞–π–¥—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegramId (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ)
    const telegramId = (player_telegram_id && player_telegram_id !== "0")
      ? String(player_telegram_id)
      : null;

    let user = telegramId ? await User.findOne({ telegramId }) : null;

    // –î–û–ë–ê–í–¨ –≠–¢–û
    if (!user && click_slug) {
      const m = String(click_slug).match(/^tg_(\d+)/);
      if (m && m[1]) {
        user = await User.findOne({ telegramId: m[1] });
      }
    }

    // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ ‚Äî –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫-–ø–æ–ª—è (–ø–æ –∂–µ–ª–∞–Ω–∏—é):
    if (user) {
      const trafficUpdate = {};
      if (promo_slug) trafficUpdate["traffic.promo_slug"] = promo_slug;
      if (click_slug) trafficUpdate["traffic.click_slug"] = click_slug;
      if (Object.keys(trafficUpdate).length) {
        await User.updateOne({ _id: user._id }, trafficUpdate);
      }
    }

    // –ï—Å–ª–∏ —é–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –º–æ–∂–Ω–æ —Ç–∏—Ö–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å (OK) –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç.
    if (!user) {
      return res.status(200).send("OK: user_not_found");
    }

    // –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: –µ—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏–ª —Ç–∞–∫–æ–π tx_id ‚Äî –ø–æ–≤—Ç–æ—Ä –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º.
    if (tx_id && user.deposits?.lastTxId === tx_id) {
      return res.status(200).send("OK: duplicate_tx_id");
    }

    // –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞
    const isDepositEvent = action === "first_deposit" || action === "deposit";
    if (!isDepositEvent) {
      // –ú–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å register/withdraw, –µ—Å–ª–∏ –Ω–∞–¥–æ
      return res.status(200).send("OK");
    }

    const usd = Number(amount_usd || 0);

    // –ë–∞–∑–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ç–æ–≤ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    const update = {
      "deposits.lastTxId": tx_id || null,
      $inc: { "deposits.count": 1, "deposits.totalUsd": usd }
    };

    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç ‚Äî –ø–æ—Å—Ç–∞–≤–∏–º –¥–∞—Ç—É –ø–µ—Ä–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞
    const isFirstByAction = action === "first_deposit";
    if (isFirstByAction && !user.deposits.firstDepositAt) {
      update["deposits.firstDepositAt"] = new Date();
    }

    // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç ‚Äî –æ–¥–∏–Ω —Ä–∞–∑
    if (isFirstByAction && !user.rewards.firstDepositGranted) {
      update.$inc.balanceTon = FIRST_DEPOSIT_REWARD_USDT;       
      update["rewards.firstDepositGranted"] = true;
      update["rewards.firstDepositAmount"]  = FIRST_DEPOSIT_REWARD_USDT;
    }

    await User.updateOne({ _id: user._id }, update);

    return res.status(200).send("OK");
  } catch (e) {
    console.error("postback error:", e);
    return res.status(200).send("ERROR"); 
  }
});


app.post("/rewards/first-deposit/reconcile", async (req, res) => {
  try {
    const { telegramId } = req.body || {};
    if (!telegramId) return res.status(400).json({ ok:false, error:"telegramId is required" });

    const user = await User.findOne({ telegramId: String(telegramId) });
    if (!user) return res.status(404).json({ ok:false, error:"User not found" });

    if (user.rewards?.firstDepositGranted) {
      return res.json({ ok:true, status:"already_granted", user });
    }

    const hadAnyDeposit =
      Boolean(user.deposits?.firstDepositAt) ||
      (Number(user.deposits?.count || 0) > 0) ||
      (Number(user.deposits?.totalUsd || 0) > 0);

    if (!hadAnyDeposit) {
      // –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–µ –≤–∏–¥–∏–º ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ–º
      return res.json({ ok:true, status:"no_deposit_detected" });
    }

    // –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ
    const upd = await User.updateOne(
      { _id: user._id, "rewards.firstDepositGranted": { $ne: true } },
      {
        $inc: { balanceTon: FIRST_DEPOSIT_REWARD_USDT },
        $set: {
          "rewards.firstDepositGranted": true,
          "rewards.firstDepositAmount": FIRST_DEPOSIT_REWARD_USDT,

          "deposits.firstDepositAt": user.deposits?.firstDepositAt || new Date()
        }
      }
    );

    if (upd.modifiedCount === 0) {
      return res.json({ ok:true, status:"already_granted" });
    }

    const fresh = await User.findOne({ _id: user._id });
    return res.json({ ok:true, status:"granted", reward: FIRST_DEPOSIT_REWARD_USDT, user: fresh });
  } catch (e) {
    console.error("/rewards/first-deposit/reconcile error:", e);
    res.status(500).json({ ok:false, error:"Server error" });
  }
});


app.get("/check-casino-deposit", async (req, res) => {
  try {
    const { userId, minUsd } = req.query;
    if (!userId) return res.status(400).json({ ok:false, error: "userId is required" });

    const user = await User.findOne({ telegramId: String(userId) });
    if (!user) return res.status(404).json({ ok:false, error: "User not found" });

    const count = Number(user.deposits?.count || 0);
    const totalUsd = Number(user.deposits?.totalUsd || 0);
    const firstDepositAt = user.deposits?.firstDepositAt || null;

    // –ñ—ë—Å—Ç–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–∞: –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω (>0), —Ç—Ä–µ–±—É–µ–º totalUsd >= minUsd
    const threshold = (minUsd !== undefined && minUsd !== null && String(minUsd).trim() !== "")
      ? Number(minUsd)
      : null;

    let deposited;
    let reason = "";

    if (threshold !== null && Number.isFinite(threshold) && threshold > 0) {
      deposited = totalUsd >= threshold;
      if (!deposited) {
        reason = `threshold_not_met: totalUsd=${totalUsd}, required=${threshold}`;
      }
    } else {
      // –ë–µ–∑ –ø–æ—Ä–æ–≥–∞: —Å—á–∏—Ç–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç —Å–≤–µ—Ä—à–∏–≤—à–∏–º—Å—è –ø–æ –ª—é–±–æ–º—É –∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
      deposited = count > 0 || totalUsd > 0 || Boolean(firstDepositAt);
      if (!deposited) {
        reason = "no_deposit";
      }
    }

    return res.json({ ok: true, deposited, count, totalUsd, firstDepositAt, minUsd: threshold, reason });
  } catch (e) {
    console.error("‚ùå /check-casino-deposit error:", e);
    return res.status(500).json({ ok:false, error: "Server error" });
  }
});


// ===== MOSTBET POSTBACK =====
// –û–∂–∏–¥–∞–µ–º –≤ query: status, subid/sub1/s1/aff_sub (–≤–∞—à userId), client_id, click_id,
// –∞ —Ç–∞–∫–∂–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ amount, currency, payout, landing, project
app.get("/postback/mostbet", async (req, res) => {
  try {
    console.log("[MOSTBET] raw:", req.originalUrl);
    const q = req.query || {};

    const status   = String(q.status || q.event || "").toLowerCase();
    const subid    = String(q.subid  || q.sub1 || q.s1 || q.aff_sub || "").trim();
    const clientId = q.client_id ? String(q.client_id) : null;
    const clickId  = q.click_id  ? String(q.click_id)  : null;
    const landing  = q.landing   ? String(q.landing)   : null;
    const project  = q.project   ? String(q.project)   : null;

    const amount   = q.amount != null ? Number(String(q.amount).replace(",", ".")) : null;
    const payout   = q.payout != null ? Number(String(q.payout).replace(",", ".")) : null;
    const currency = q.currency ? String(q.currency) : null;

    // userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω ‚Äî —Ç—ã –ø–µ—Ä–µ–¥–∞—ë—à—å –µ–≥–æ –≤ —Å—Å—ã–ª–∫–µ –∫–∞–∫ ?sub1={telegramId}
    if (!subid) return res.status(200).send("OK: no_subid");

    const user = await User.findOne({ telegramId: subid });
    if (!user) return res.status(200).send("OK: user_not_found");

    // –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –ø–æ—Å—Ç–±—ç–∫ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
    const sig = crypto.createHash("sha1").update(req.originalUrl).digest("hex");
    if (user.mostbet?.lastSig === sig) {
      return res.status(200).send("OK: duplicate");
    }

    const now = new Date();
    const update = {
      "mostbet.lastSig": sig,
      "mostbet.lastStatus": status || user.mostbet?.lastStatus || null,
      "mostbet.lastAt": now,
    };

    if (clientId) update["mostbet.clientId"] = clientId;
    if (clickId)  update["mostbet.clickId"]  = clickId;

    // –õ—ë–≥–∫–∏–µ —Ç—Ä–∞—Ñ–∏–∫-–º–µ—Ç–∫–∏
    if (landing) update["traffic.mostbet_landing"] = landing;
    if (project) update["traffic.mostbet_project"] = project;
    if (clickId) update["traffic.mostbet_click_id"] = clickId;

    // –°—Ç–∞—Ç—É—Å—ã ‚Üí –ø–æ–ª—è –¥–∞—Ç
    switch (status) {
      case "reg":
      case "registration":
        if (!user.mostbet?.registrationAt) {
          update["mostbet.registrationAt"] = now;
        }
        break;
      case "fdp":
      case "first_deposit":
        if (!user.mostbet?.firstDepositAt) {
          update["mostbet.firstDepositAt"] = now;
        }
        break;
      case "first_bet":
      case "fb":
      case "first_bet_placed":
        if (!user.mostbet?.firstBetAt) {
          update["mostbet.firstBetAt"] = now;
        }
        break;
      default:
        // –¥—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—É—Å—ã –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—à–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        break;
    }

    // –ü–∏—à–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    update.$push = {
      "mostbet.events": {
        status: status || null,
        at: now,
        amount: Number.isFinite(amount) ? amount : 0,
        currency: currency || null,
        payout: Number.isFinite(payout) ? payout : 0,
        raw: q
      }
    };

    await User.updateOne({ _id: user._id }, update);
    return res.status(200).send("OK");
  } catch (e) {
    console.error("mostbet postback error:", e);
    return res.status(200).send("ERROR");
  }
});

// –í–µ—Ä–Ω—É—Ç—å –º–æ—é —Å—Å—ã–ª–∫—É –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
app.get("/referral-info", async (req, res) => {
  try {
    const { telegramId } = req.query || {};
    if (!telegramId) return res.status(400).json({ ok:false, error:"telegramId is required" });

    const user = await User.findOne({ telegramId: String(telegramId) }).lean();
    if (!user) return res.status(404).json({ ok:false, error:"User not found" });

    if (!user?.referral?.code) {
      const code = await ensureUserRefCode(user);
      user.referral = user.referral || {};
      user.referral.code = code;
    }

    const bot = process.env.TELEGRAM_BOT_USERNAME || ""; // –±–µ–∑ @
    const code = user.referral.code;
    const tgLink = bot ? `https://t.me/${bot}?start=ref_${code}` : null;
    const webAppLink = bot ? `https://t.me/${bot}/${process.env.TELEGRAM_WEBAPP_PATH}?startapp=ref_${code}` : null;

    res.json({
      ok: true,
      code,
      links: { tg: tgLink, webapp: webAppLink },
      stats: {
        referredBy: inviter?.username ? String(inviter.username) : String(inviter.telegramId) || null,
        referralsCount: user?.referral?.referralsCount || 0,
        referrals: user?.referral?.referrals || [],
      }
    });
  } catch (e) {
    console.error("/referral-info error:", e);
    res.status(500).json({ ok:false, error:"Server error" });
  }
});

// –†–µ–¥–∏—Ä–µ–∫—Ç –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–µ /ref/<code> -> –∫ –±–æ—Ç—É
app.get("/ref/:code", async (req, res) => {
  try {
    const { code } = req.params;
    const bot = process.env.TELEGRAM_BOT_USERNAME;
    if (!bot) return res.status(400).type("text/plain").send("TELEGRAM_BOT_USERNAME is not set");
    const target = `https://t.me/${bot}?start=ref_${encodeURIComponent(code)}`;
    return res.redirect(302, target);
  } catch (e) {
    console.error("/ref/:code error:", e);
    res.status(500).type("text/plain").send("Server error");
  }
});

// ‚úÖ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 8080;
app.listen(PORT, "0.0.0.0", () => {
  console.log(`üöÄ Server running on port ${PORT}`);
});